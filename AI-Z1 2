from flask import Flask, render_template_string, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from flask_socketio import SocketIO
import os
import uuid
import re
import random
import logging
from datetime import datetime

# --- CONFIGURATION ---
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SESSION_SECRET', 'your-secret-key')
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///ai_assistant.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
socketio = SocketIO(app, cors_allowed_origins="*")

# --- DATABASE MODELS ---
class User(db.Model):
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    session_id = db.Column(db.String(100), unique=True, nullable=False)
    name = db.Column(db.String(100))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    preferences = db.Column(db.Text)

class Conversation(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String(36), db.ForeignKey('user.id'), nullable=False)
    message = db.Column(db.Text, nullable=False)
    response = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

# --- AI ENGINE (BASIC MEMORY + PATTERN MATCHING) ---
class AIEngine:
    def __init__(self):
        self.knowledge_base = self._load_knowledge_base()
        self.user_memory = {}
        self.conversation_history = []

    def _load_knowledge_base(self):
        return {
            'science': {
                'physics': "Physics studies matter, energy, motion, and forces.",
                'chemistry': "Chemistry is the study of matter and its reactions.",
                'biology': "Biology studies living organisms.",
                'ai': "AI stands for Artificial Intelligence — smart machines!"
            },
            'technology': {
                'computer': "A computer processes data and runs programs.",
                'internet': "The Internet is a global network of connected computers."
            }
        }

    def generate_response(self, prompt):
        prompt_lower = prompt.lower().strip()
        memory_response = self._handle_memory(prompt_lower)
        if memory_response:
            return memory_response
        return self._generate_intelligent_response(prompt, prompt_lower)

    def _handle_memory(self, prompt):
        name_match = re.search(r"(my name is|i am|call me|i'm) (\w+)", prompt)
        if name_match:
            name = name_match.group(2).capitalize()
            self.user_memory['name'] = name
            return f"Nice to meet you, {name}!"
        if 'my name' in prompt and self.user_memory.get('name'):
            return f"Your name is {self.user_memory['name']}, of course!"
        return None

    def _generate_intelligent_response(self, original, lower):
        greetings = ['hello', 'hi', 'hey']
        if any(word in lower for word in greetings):
            name = self.user_memory.get('name', '')
            return f"Hi {name}! How can I assist you?" if name else "Hello! How can I help you?"

        if any(lower.startswith(q) for q in ['what', 'how', 'why']):
            return f"That's a great question about \"{original}\". Let me think..."

        if 'python' in lower or 'code' in lower:
            return "It sounds like you're asking about programming. Need help with syntax?"

        if 'who are you' in lower:
            return "I'm ADA — your offline, privacy-friendly AI assistant!"

        return random.choice([
            f"Interesting. Tell me more about \"{original}\".",
            f"Hmm... \"{original}\" sounds important. Want to expand on that?",
            f"I'm here to listen. What's next?"
        ])

ai_engine = AIEngine()

# --- ROUTES ---
@app.route('/')
def index():
    return render_template_string(html_template)

@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        if not message:
            return jsonify({'error': 'No message provided'}), 400

        # Get or create user session
        session_id = session.get('session_id')
        if not session_id:
            session_id = str(uuid.uuid4())
            session['session_id'] = session_id

        user = User.query.filter_by(session_id=session_id).first()
        if not user:
            user = User(session_id=session_id)
            db.session.add(user)
            db.session.commit()

        response = ai_engine.generate_response(message)

        conversation = Conversation(user_id=user.id, message=message, response=response)
        db.session.add(conversation)
        db.session.commit()

        return jsonify({'response': response, 'timestamp': datetime.now().isoformat()})
    except Exception as e:
        logging.error(f"Error in /api/chat: {e}")
        return jsonify({'error': 'Internal server error'}), 500

# --- HTML TEMPLATE ---
html_template = '''
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ADA Assistant</title>
  <style>
    body { font-family: sans-serif; background: #f0f0f0; padding: 2rem; }
    #chatbox { background: white; border: 1px solid #ccc; padding: 1rem; height: 400px; overflow-y: auto; }
    .message { margin: 0.5rem 0; }
    .user { font-weight: bold; color: #333; }
    .bot { color: #007BFF; }
    #inputBox { width: 100%; padding: 0.5rem; margin-top: 1rem; }
  </style>
</head>
<body>
  <h2>ADA Chat Assistant</h2>
  <div id="chatbox"></div>
  <input type="text" id="inputBox" placeholder="Say something..." onkeypress="handleKey(event)">
  <script>
    async function handleKey(event) {
      if (event.key === "Enter") {
        const input = document.getElementById("inputBox").value;
        if (input.trim() === "") return;
        appendMessage("user", input);
        document.getElementById("inputBox").value = "";

        const res = await fetch("/api/chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ message: input })
        });

        const data = await res.json();
        appendMessage("bot", data.response);
      }
    }

    function appendMessage(sender, text) {
      const box = document.getElementById("chatbox");
      const msg = document.createElement("div");
      msg.className = "message " + sender;
      msg.textContent = (sender === "user" ? "You" : "ADA") + ": " + text;
      box.appendChild(msg);
      box.scrollTop = box.scrollHeight;
    }
  </script>
</body>
</html>
'''

# --- DB INIT ---
with app.app_context():
    db.create_all()

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)
